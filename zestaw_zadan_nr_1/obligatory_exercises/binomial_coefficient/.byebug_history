exit
dynamic_programming(1,0)
dynamic_programming(1, 2)
dynamic_programming(1, 0.9)
exit
ErrorHandler.handle_error(1, 0.9)
ErrorHandler(1, 0.9)
dynamic_programming(1, 0.9)
eval m
eval n
recursive(1, 0.9)
0.9.integer?
print "dupa" unless 1.integer? && 0.9.integer?
dynamic_programming(1, 0.9)
exit
eval n;eval m
continue
eval n;eval m
continue
eval n;eval m
next
continue
next
eval m
eval n
dynamic_programming(-1, 1)
eval n; eval m
eval m
evalm
next
eval m
eval n
next
eval m
eval n
next
ErrorHandler.handle_error(0, 1)
eval m
eval n
exit
dynamic_programming(-1, 1)
eval m
eval n
continue
exit
dynamic_programming(5000, 500)
dynamic_programming(1000, 4)
dynamic_programming(100, 3)
dynamic_programming(10,2)
eval m
eval n
continue
eval m
eval n
continue
eval m
eval n
continue
eval m
eval n
continue
next
eval m
eval n
n
dynamic_programming(n, m)
dynamic_programming(1, 0.9)
exit
exxit
clear
eval n; eval m
next
eval n; eval m
next
eval n; eval m
next
eval n; eval m
next
eval n; eval m
eval m
eval n
exit
eval m
eval n
next
eval n
next
eval m
next
eval m
next
eval m
next
eval m
eval n
exit
eval n
eval m
continue
eval m
eval n
exit
eval m
eval n
continue
eval m
eval n
continue
next
eval m
eval n
continue
dynamic_programming(1, 0.9)
exit
continue
dynamic_programming(1, 0.9)
exit
continue
1.positive?
0.positive?
-1.positive?
-1.integer?
dynamic_programming(1, -1)
recursive(1, -1)
eval m
eval n
next
eval m
eval n
next
eval m
eval n
next
dynamic_programming(1, 0.9)
recursive(1, 0.9)
next
eval m
eval n
next
recursive(-1, 1)
dynamic_programming(-1, 1)
dynamic_programing(-1, 1)
next
eval n
eval m
next
eval m
eval n
n
next
e.message
next
dynamic_programming(0, 1)
recursive(0, 1)
m
eval n
exit
eval n
h
n
exit
m
n
m
n
next
ErrorHandler.handle_eror(n,m)
next
